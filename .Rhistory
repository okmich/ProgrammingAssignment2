m
mm <- matrix(sample(1:15), nrow=5, ncol=5)
mm
dim(mm)
dim(mm)[1]
dim(mm)[2]
dim(mm) == c(5, 5)
all(dim(mm) == 5)
all(dim(mm) == 4)
length(mm)
length(mm)
is.matrix(mm)
source('F:/classes/DataScience/2-rprog-011/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
source('F:/classes/DataScience/2-rprog-011/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
all(dim(mm) == 4)
source('F:/classes/DataScience/2-rprog-011/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
mm
cacheSolve(mm)
source('F:/classes/DataScience/2-rprog-011/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mm)
makeCacheMatrix(mm)
res<-makeCacheMatrix(mm)
class(res)
res$get
res$get()
res$getInverse()
makeCacheMatrix(mm)
cacheSolve(mm)
res<-makeCacheMatrix(mm)
cacheSolve(res)
size <- 1000
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
mymatrix.inverse
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.matrix$get()
solve(special.matrix$get())
source('F:/classes/DataScience/2-rprog-011/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
special.solved.1 <- cacheSolve(special.matrix)
special.solved.1
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
#
# generate matrix, and the inverse of the matrix.
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
#
# now solve the matrix via the cache-method
#
special.matrix   <- makeCacheMatrix(mymatrix)
#
# this should take long, since it's the first go
special.solved.1 <- cacheSolve(special.matrix)
#
# this should be lightning fast
special.solved.2 <- cacheSolve(special.matrix)
#
# check if all solved matrices are identical
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
#
# should return TRUE
inverse
